{"remainingRequest":"/home/alphabat69/WorkSpace/GitHub Repositories/MEAN-Stack-Training/Assignment_6/GOF/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/home/alphabat69/WorkSpace/GitHub Repositories/MEAN-Stack-Training/Assignment_6/GOF/node_modules/angular-svg-round-progressbar/dist/round-progress.component.js","dependencies":[{"path":"/home/alphabat69/WorkSpace/GitHub Repositories/MEAN-Stack-Training/Assignment_6/GOF/node_modules/angular-svg-round-progressbar/dist/round-progress.component.js","mtime":499162500000},{"path":"/home/alphabat69/WorkSpace/GitHub Repositories/MEAN-Stack-Training/Assignment_6/GOF/node_modules/cache-loader/dist/cjs.js","mtime":1529607850724},{"path":"/home/alphabat69/WorkSpace/GitHub Repositories/MEAN-Stack-Training/Assignment_6/GOF/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar round_progress_service_1 = require(\"./round-progress.service\");\nvar round_progress_config_1 = require(\"./round-progress.config\");\nvar round_progress_ease_1 = require(\"./round-progress.ease\");\nvar RoundProgressComponent = /** @class */ /*@__PURE__*/ (function () {\n    function RoundProgressComponent(_service, _easing, _defaults, _ngZone, _renderer) {\n        this._service = _service;\n        this._easing = _easing;\n        this._defaults = _defaults;\n        this._ngZone = _ngZone;\n        this._renderer = _renderer;\n        this._lastAnimationId = 0;\n        this.radius = this._defaults.radius;\n        this.animation = this._defaults.animation;\n        this.animationDelay = this._defaults.animationDelay;\n        this.duration = this._defaults.duration;\n        this.stroke = this._defaults.stroke;\n        this.color = this._defaults.color;\n        this.background = this._defaults.background;\n        this.responsive = this._defaults.responsive;\n        this.clockwise = this._defaults.clockwise;\n        this.semicircle = this._defaults.semicircle;\n        this.rounded = this._defaults.rounded;\n        this.onRender = new core_1.EventEmitter();\n    }\n    /** Animates a change in the current value. */\n    /** Animates a change in the current value. */\n    RoundProgressComponent.prototype._animateChange = /** Animates a change in the current value. */\n        function (from, to) {\n            var _this = this;\n            if (typeof from !== 'number') {\n                from = 0;\n            }\n            to = this._clamp(to);\n            from = this._clamp(from);\n            var self = this;\n            var changeInValue = to - from;\n            var duration = self.duration;\n            // Avoid firing change detection for each of the animation frames.\n            self._ngZone.runOutsideAngular(function () {\n                var start = function () {\n                    var startTime = self._service.getTimestamp();\n                    var id = ++self._lastAnimationId;\n                    requestAnimationFrame(function animation() {\n                        var currentTime = Math.min(self._service.getTimestamp() - startTime, duration);\n                        var value = self._easing[self.animation](currentTime, from, changeInValue, duration);\n                        self._setPath(value);\n                        self.onRender.emit(value);\n                        if (id === self._lastAnimationId && currentTime < duration) {\n                            requestAnimationFrame(animation);\n                        }\n                    });\n                };\n                if (_this.animationDelay > 0) {\n                    setTimeout(start, _this.animationDelay);\n                }\n                else {\n                    start();\n                }\n            });\n        };\n    /** Sets the path dimensions. */\n    /** Sets the path dimensions. */\n    RoundProgressComponent.prototype._setPath = /** Sets the path dimensions. */\n        function (value) {\n            if (this._path) {\n                this._renderer.setElementAttribute(this._path.nativeElement, 'd', this._service.getArc(value, this.max, this.radius - this.stroke / 2, this.radius, this.semicircle));\n            }\n        };\n    /** Clamps a value between the maximum and 0. */\n    /** Clamps a value between the maximum and 0. */\n    RoundProgressComponent.prototype._clamp = /** Clamps a value between the maximum and 0. */\n        function (value) {\n            return Math.max(0, Math.min(value || 0, this.max));\n        };\n    /** Determines the SVG transforms for the <path> node. */\n    /** Determines the SVG transforms for the <path> node. */\n    RoundProgressComponent.prototype.getPathTransform = /** Determines the SVG transforms for the <path> node. */\n        function () {\n            var diameter = this._diameter;\n            if (this.semicircle) {\n                return this.clockwise ?\n                    \"translate(0, \" + diameter + \") rotate(-90)\" :\n                    \"translate(\" + (diameter + ',' + diameter) + \") rotate(90) scale(-1, 1)\";\n            }\n            else if (!this.clockwise) {\n                return \"scale(-1, 1) translate(-\" + diameter + \" 0)\";\n            }\n        };\n    /** Resolves a color through the service. */\n    /** Resolves a color through the service. */\n    RoundProgressComponent.prototype.resolveColor = /** Resolves a color through the service. */\n        function (color) {\n            return this._service.resolveColor(color);\n        };\n    /** Change detection callback. */\n    /** Change detection callback. */\n    RoundProgressComponent.prototype.ngOnChanges = /** Change detection callback. */\n        function (changes) {\n            if (changes.current) {\n                this._animateChange(changes.current.previousValue, changes.current.currentValue);\n            }\n            else {\n                this._setPath(this.current);\n            }\n        };\n    Object.defineProperty(RoundProgressComponent.prototype, \"_diameter\", {\n        /** Diameter of the circle. */\n        get: /** Diameter of the circle. */ function () {\n            return this.radius * 2;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RoundProgressComponent.prototype, \"_elementHeight\", {\n        /** The CSS height of the wrapper element. */\n        get: /** The CSS height of the wrapper element. */ function () {\n            if (!this.responsive) {\n                return (this.semicircle ? this.radius : this._diameter) + 'px';\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RoundProgressComponent.prototype, \"_viewBox\", {\n        /** Viewbox for the SVG element. */\n        get: /** Viewbox for the SVG element. */ function () {\n            var diameter = this._diameter;\n            return \"0 0 \" + diameter + \" \" + (this.semicircle ? this.radius : diameter);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RoundProgressComponent.prototype, \"_paddingBottom\", {\n        /** Bottom padding for the wrapper element. */\n        get: /** Bottom padding for the wrapper element. */ function () {\n            if (this.responsive) {\n                return this.semicircle ? '50%' : '100%';\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    RoundProgressComponent.decorators = [\n        { type: core_1.Component, args: [{\n                    selector: 'round-progress',\n                    template: \"\\n    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" [attr.viewBox]=\\\"_viewBox\\\">\\n      <circle\\n        fill=\\\"none\\\"\\n        [attr.cx]=\\\"radius\\\"\\n        [attr.cy]=\\\"radius\\\"\\n        [attr.r]=\\\"radius - stroke / 2\\\"\\n        [style.stroke]=\\\"resolveColor(background)\\\"\\n        [style.stroke-width]=\\\"stroke\\\"/>\\n\\n      <path\\n        #path\\n        fill=\\\"none\\\"\\n        [style.stroke-width]=\\\"stroke\\\"\\n        [style.stroke]=\\\"resolveColor(color)\\\"\\n        [style.stroke-linecap]=\\\"rounded ? 'round' : ''\\\"\\n        [attr.transform]=\\\"getPathTransform()\\\"/>\\n    </svg>\\n  \",\n                    host: {\n                        'role': 'progressbar',\n                        '[attr.aria-valuemin]': 'current',\n                        '[attr.aria-valuemax]': 'max',\n                        '[style.width]': \"responsive ? '' : _diameter + 'px'\",\n                        '[style.height]': '_elementHeight',\n                        '[style.padding-bottom]': '_paddingBottom',\n                        '[class.responsive]': 'responsive'\n                    },\n                    styles: [\n                        \":host {\\n      display: block;\\n      position: relative;\\n      overflow: hidden;\\n    }\",\n                        \":host.responsive {\\n      width: 100%;\\n      padding-bottom: 100%;\\n    }\",\n                        \":host.responsive > svg {\\n      position: absolute;\\n      width: 100%;\\n      height: 100%;\\n      top: 0;\\n      left: 0;\\n    }\"\n                    ]\n                },] },\n    ];\n    RoundProgressComponent.propDecorators = {\n        \"_path\": [{ type: core_1.ViewChild, args: ['path',] },],\n        \"current\": [{ type: core_1.Input },],\n        \"max\": [{ type: core_1.Input },],\n        \"radius\": [{ type: core_1.Input },],\n        \"animation\": [{ type: core_1.Input },],\n        \"animationDelay\": [{ type: core_1.Input },],\n        \"duration\": [{ type: core_1.Input },],\n        \"stroke\": [{ type: core_1.Input },],\n        \"color\": [{ type: core_1.Input },],\n        \"background\": [{ type: core_1.Input },],\n        \"responsive\": [{ type: core_1.Input },],\n        \"clockwise\": [{ type: core_1.Input },],\n        \"semicircle\": [{ type: core_1.Input },],\n        \"rounded\": [{ type: core_1.Input },],\n        \"onRender\": [{ type: core_1.Output },],\n    };\n    return RoundProgressComponent;\n}());\nexports.RoundProgressComponent = RoundProgressComponent;\n",null]}