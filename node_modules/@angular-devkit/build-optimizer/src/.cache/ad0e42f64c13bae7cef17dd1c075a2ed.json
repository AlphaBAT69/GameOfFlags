{"remainingRequest":"/home/alphabat69/WorkSpace/GitHub Repositories/MEAN-Stack-Training/Assignment_6/GOF/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/home/alphabat69/WorkSpace/GitHub Repositories/MEAN-Stack-Training/Assignment_6/GOF/node_modules/angular-svg-round-progressbar/dist/round-progress.ease.js","dependencies":[{"path":"/home/alphabat69/WorkSpace/GitHub Repositories/MEAN-Stack-Training/Assignment_6/GOF/node_modules/angular-svg-round-progressbar/dist/round-progress.ease.js","mtime":499162500000},{"path":"/home/alphabat69/WorkSpace/GitHub Repositories/MEAN-Stack-Training/Assignment_6/GOF/node_modules/cache-loader/dist/cjs.js","mtime":1529607850724},{"path":"/home/alphabat69/WorkSpace/GitHub Repositories/MEAN-Stack-Training/Assignment_6/GOF/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar RoundProgressEase = /** @class */ /*@__PURE__*/ (function () {\n    function RoundProgressEase() {\n    }\n    // t: current time (or position) of the neonate. This can be seconds or frames, steps,\n    // seconds, ms, whatever – as long as the unit is the same as is used for the total time.\n    // b: beginning value of the property.\n    // c: change between the beginning and destination value of the property.\n    // d: total time of the neonate.\n    // t: current time (or position) of the neonate. This can be seconds or frames, steps,\n    // seconds, ms, whatever – as long as the unit is the same as is used for the total time.\n    // b: beginning value of the property.\n    // c: change between the beginning and destination value of the property.\n    // d: total time of the neonate.\n    RoundProgressEase.prototype.linearEase =\n        // t: current time (or position) of the neonate. This can be seconds or frames, steps,\n        // seconds, ms, whatever – as long as the unit is the same as is used for the total time.\n        // b: beginning value of the property.\n        // c: change between the beginning and destination value of the property.\n        // d: total time of the neonate.\n        function (t, b, c, d) {\n            return c * t / d + b;\n        };\n    ;\n    RoundProgressEase.prototype.easeInQuad = function (t, b, c, d) {\n        return c * (t /= d) * t + b;\n    };\n    ;\n    RoundProgressEase.prototype.easeOutQuad = function (t, b, c, d) {\n        return -c * (t /= d) * (t - 2) + b;\n    };\n    ;\n    RoundProgressEase.prototype.easeInOutQuad = function (t, b, c, d) {\n        if ((t /= d / 2) < 1) {\n            return c / 2 * t * t + b;\n        }\n        return -c / 2 * ((--t) * (t - 2) - 1) + b;\n    };\n    ;\n    RoundProgressEase.prototype.easeInCubic = function (t, b, c, d) {\n        return c * (t /= d) * t * t + b;\n    };\n    ;\n    RoundProgressEase.prototype.easeOutCubic = function (t, b, c, d) {\n        return c * ((t = t / d - 1) * t * t + 1) + b;\n    };\n    ;\n    RoundProgressEase.prototype.easeInOutCubic = function (t, b, c, d) {\n        if ((t /= d / 2) < 1) {\n            return c / 2 * t * t * t + b;\n        }\n        return c / 2 * ((t -= 2) * t * t + 2) + b;\n    };\n    ;\n    RoundProgressEase.prototype.easeInQuart = function (t, b, c, d) {\n        return c * (t /= d) * t * t * t + b;\n    };\n    ;\n    RoundProgressEase.prototype.easeOutQuart = function (t, b, c, d) {\n        return -c * ((t = t / d - 1) * t * t * t - 1) + b;\n    };\n    ;\n    RoundProgressEase.prototype.easeInOutQuart = function (t, b, c, d) {\n        if ((t /= d / 2) < 1) {\n            return c / 2 * t * t * t * t + b;\n        }\n        return -c / 2 * ((t -= 2) * t * t * t - 2) + b;\n    };\n    ;\n    RoundProgressEase.prototype.easeInQuint = function (t, b, c, d) {\n        return c * (t /= d) * t * t * t * t + b;\n    };\n    ;\n    RoundProgressEase.prototype.easeOutQuint = function (t, b, c, d) {\n        return c * ((t = t / d - 1) * t * t * t * t + 1) + b;\n    };\n    ;\n    RoundProgressEase.prototype.easeInOutQuint = function (t, b, c, d) {\n        if ((t /= d / 2) < 1) {\n            return c / 2 * t * t * t * t * t + b;\n        }\n        return c / 2 * ((t -= 2) * t * t * t * t + 2) + b;\n    };\n    ;\n    RoundProgressEase.prototype.easeInSine = function (t, b, c, d) {\n        return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;\n    };\n    ;\n    RoundProgressEase.prototype.easeOutSine = function (t, b, c, d) {\n        return c * Math.sin(t / d * (Math.PI / 2)) + b;\n    };\n    ;\n    RoundProgressEase.prototype.easeInOutSine = function (t, b, c, d) {\n        return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;\n    };\n    ;\n    RoundProgressEase.prototype.easeInExpo = function (t, b, c, d) {\n        return (t == 0) ? b : c * Math.pow(2, 10 * (t / d - 1)) + b;\n    };\n    ;\n    RoundProgressEase.prototype.easeOutExpo = function (t, b, c, d) {\n        return (t == d) ? b + c : c * (-Math.pow(2, -10 * t / d) + 1) + b;\n    };\n    ;\n    RoundProgressEase.prototype.easeInOutExpo = function (t, b, c, d) {\n        if (t == 0) {\n            return b;\n        }\n        ;\n        if (t == d) {\n            return b + c;\n        }\n        if ((t /= d / 2) < 1) {\n            return c / 2 * Math.pow(2, 10 * (t - 1)) + b;\n        }\n        return c / 2 * (-Math.pow(2, -10 * --t) + 2) + b;\n    };\n    ;\n    RoundProgressEase.prototype.easeInCirc = function (t, b, c, d) {\n        return -c * (Math.sqrt(1 - (t /= d) * t) - 1) + b;\n    };\n    ;\n    RoundProgressEase.prototype.easeOutCirc = function (t, b, c, d) {\n        return c * Math.sqrt(1 - (t = t / d - 1) * t) + b;\n    };\n    ;\n    RoundProgressEase.prototype.easeInOutCirc = function (t, b, c, d) {\n        if ((t /= d / 2) < 1) {\n            return -c / 2 * (Math.sqrt(1 - t * t) - 1) + b;\n        }\n        return c / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1) + b;\n    };\n    ;\n    RoundProgressEase.prototype.easeInElastic = function (t, b, c, d) {\n        var s = 1.70158;\n        var p = d * 0.3;\n        var a = c;\n        if (t == 0) {\n            return b;\n        }\n        if ((t /= d) == 1) {\n            return b + c;\n        }\n        if (a < Math.abs(c)) {\n            a = c;\n            s = p / 4;\n        }\n        else {\n            s = p / (2 * Math.PI) * Math.asin(c / a);\n        }\n        return -(a * Math.pow(2, 10 * (t--)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;\n    };\n    ;\n    RoundProgressEase.prototype.easeOutElastic = function (t, b, c, d) {\n        var s = 1.70158;\n        var p = d * 0.3;\n        var a = c;\n        if (t == 0) {\n            return b;\n        }\n        if ((t /= d) == 1) {\n            return b + c;\n        }\n        if (a < Math.abs(c)) {\n            a = c;\n            s = p / 4;\n        }\n        else {\n            s = p / (2 * Math.PI) * Math.asin(c / a);\n        }\n        return a * Math.pow(2, -10 * t) * Math.sin((t * d - s) * (2 * Math.PI) / p) + c + b;\n    };\n    ;\n    RoundProgressEase.prototype.easeInOutElastic = function (t, b, c, d) {\n        var s = 1.70158;\n        var p = d * (0.3 * 1.5);\n        var a = c;\n        if (t == 0) {\n            return b;\n        }\n        if ((t /= d / 2) == 2) {\n            return b + c;\n        }\n        if (a < Math.abs(c)) {\n            a = c;\n            s = p / 4;\n        }\n        else {\n            s = p / (2 * Math.PI) * Math.asin(c / a);\n        }\n        if (t < 1) {\n            return -0.5 * (a * Math.pow(2, 10 * (t -= 1)) *\n                Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;\n        }\n        return a * Math.pow(2, -10 * (t -= 1)) *\n            Math.sin((t * d - s) * (2 * Math.PI) / p) * 0.5 + c + b;\n    };\n    ;\n    RoundProgressEase.prototype.easeInBack = function (t, b, c, d, s) {\n        if (s === void 0) {\n            s = 1.70158;\n        }\n        return c * (t /= d) * t * ((s + 1) * t - s) + b;\n    };\n    ;\n    RoundProgressEase.prototype.easeOutBack = function (t, b, c, d, s) {\n        if (s === void 0) {\n            s = 1.70158;\n        }\n        return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;\n    };\n    ;\n    RoundProgressEase.prototype.easeInOutBack = function (t, b, c, d, s) {\n        if (s === void 0) {\n            s = 1.70158;\n        }\n        if ((t /= d / 2) < 1) {\n            return c / 2 * (t * t * (((s *= 1.525) + 1) * t - s)) + b;\n        }\n        return c / 2 * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2) + b;\n    };\n    ;\n    RoundProgressEase.prototype.easeInBounce = function (t, b, c, d) {\n        return c - this.easeOutBounce(d - t, 0, c, d) + b;\n    };\n    ;\n    RoundProgressEase.prototype.easeOutBounce = function (t, b, c, d) {\n        if ((t /= d) < (1 / 2.75)) {\n            return c * (7.5625 * t * t) + b;\n        }\n        else if (t < (2 / 2.75)) {\n            return c * (7.5625 * (t -= (1.5 / 2.75)) * t + 0.75) + b;\n        }\n        else if (t < (2.5 / 2.75)) {\n            return c * (7.5625 * (t -= (2.25 / 2.75)) * t + 0.9375) + b;\n        }\n        return c * (7.5625 * (t -= (2.625 / 2.75)) * t + 0.984375) + b;\n    };\n    ;\n    RoundProgressEase.prototype.easeInOutBounce = function (t, b, c, d) {\n        if (t < d / 2) {\n            return this.easeInBounce(t * 2, 0, c, d) * 0.5 + b;\n        }\n        return this.easeOutBounce(t * 2 - d, 0, c, d) * 0.5 + c * 0.5 + b;\n    };\n    ;\n    RoundProgressEase.decorators = [\n        { type: core_1.Injectable },\n    ];\n    return RoundProgressEase;\n}());\nexports.RoundProgressEase = RoundProgressEase;\n",null]}